digraph MyGraph {
graph [outputorder=edgesfirst];
Initialized [label="Initialized"]
ServantAccepted [label="ServantAccepted"]
TempleBuilt [label="TempleBuilt"]
BuildingWatergate [label="BuildingWatergate"]
WatergateBuilt [label="WatergateBuilt"]
VisitorArrived [label="VisitorArrived"]
FirstVisitorWelcomed [label="FirstVisitorWelcomed"]
PickingPrimaryCivBonus [label="PickingPrimaryCivBonus"]
SolvingPrimaryCivQuestPartA [label="SolvingPrimaryCivQuestPartA"]
SolvingPrimaryCivQuestPartB [label="SolvingPrimaryCivQuestPartB"]
DialogueBalanceA [label="DialogueBalanceA"]
DialogueBalanceB [label="DialogueBalanceB"]
SolvingSecondaryQuestA [label="SolvingSecondaryQuestA"]
SolvingSecondaryQuestB [label="SolvingSecondaryQuestB"]
AllDone [label="AllDone"]
Initialized -> ServantAccepted [decorate=true, color=black, label=< <B>DialogueStoryTrigger</B> >]
ServantAccepted -> TempleBuilt [decorate=true, color=black, label=< <B>BuildingBuilt(Temple)</B> >]
TempleBuilt -> BuildingWatergate [decorate=true, color=black, label=< <B>DialogueStoryTrigger</B> >]
BuildingWatergate -> WatergateBuilt [decorate=true, color=black, label=< <B>BuildingBuilt(Watergate)</B> >]
WatergateBuilt -> VisitorArrived [decorate=true, color=black, label=< <B>DialogueStoryTrigger</B> <br/>SendHobo([VisitorDefinition { typ: Yellow, level: HoboLevel(0), hurried: false }, ]) >]
VisitorArrived -> VisitorArrived [decorate=true, color=invis, label=< <B>DialogueStoryTrigger</B> <br/>StartQuest(HelloWorld) <br/>AddMana(10) >]
VisitorArrived -> FirstVisitorWelcomed [decorate=true, color=black, label=< <B>FinishedQuest(HelloWorld)</B> <br/>StartQuest(CreateForest) >]
FirstVisitorWelcomed -> FirstVisitorWelcomed [decorate=true, color=invis, label=< <B>FinishedQuest(CreateForest)</B> <br/>StartQuest(BuildBundlingStation) >]
FirstVisitorWelcomed -> FirstVisitorWelcomed [decorate=true, color=invis, label=< <B>FinishedQuest(BuildBundlingStation)</B> <br/>StartQuest(UseBundlingStation) >]
FirstVisitorWelcomed -> PickingPrimaryCivBonus [decorate=true, color=black, label=< <B>FinishedQuest(UseBundlingStation)</B> >]
PickingPrimaryCivBonus -> SolvingPrimaryCivQuestPartA [decorate=true, color=black, label=< <B>DialogueChoice(StoryChoice { chosen_option: 0 })</B> <br/>StartQuest(Socialize) >]
PickingPrimaryCivBonus -> SolvingPrimaryCivQuestPartA [decorate=true, color=black, label=< <B>DialogueChoice(StoryChoice { chosen_option: 1 })</B> <br/>StartQuest(BuildNest) <br/>UnlockPerk(NestBuilding) >]
SolvingPrimaryCivQuestPartA -> SolvingPrimaryCivQuestPartB [decorate=true, color=black, label=< <B>FinishedQuest(Socialize)</B> <br/>StartQuest(SocializeMore) <br/>UnlockPerk(Invitation) >]
SolvingPrimaryCivQuestPartA -> SolvingPrimaryCivQuestPartB [decorate=true, color=black, label=< <B>FinishedQuest(BuildNest)</B> <br/>StartQuest(GrowPopulation) >]
SolvingPrimaryCivQuestPartB -> DialogueBalanceA [decorate=true, color=black, label=< <B>FinishedQuest(SocializeMore)</B> >]
SolvingPrimaryCivQuestPartB -> DialogueBalanceB [decorate=true, color=black, label=< <B>FinishedQuest(GrowPopulation)</B> >]
DialogueBalanceA -> SolvingSecondaryQuestA [decorate=true, color=black, label=< <B>DialogueStoryTrigger</B> <br/>StartQuest(GrowPopulation) >]
DialogueBalanceB -> SolvingSecondaryQuestB [decorate=true, color=black, label=< <B>DialogueStoryTrigger</B> <br/>UnlockPerk(Invitation) <br/>StartQuest(SocializeMore) >]
SolvingSecondaryQuestA -> AllDone [decorate=true, color=black, label=< <B>FinishedQuest(SocializeMore)</B> >]
SolvingSecondaryQuestB -> AllDone [decorate=true, color=black, label=< <B>DialogueStoryTrigger</B> >]
}
