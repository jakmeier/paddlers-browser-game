//! The game event manager handles events that are generated by SPECS systems.

use crate::gui::ui_state::UiState;
use crate::net::request_foreign_town;
use crate::prelude::*;
use crate::{
    game::{
        components::*, player_info::PlayerInfo, story::DialogueAction, units::attackers::Visitor,
        units::attackers::*,
    },
    net::game_master_api::HttpNotifyVisitorSatisfied,
};
use crate::{gui::input::UiView, net::game_master_api::RestApiState};
use crate::{gui::ui_state::Now, net::state::current_village};
use paddle::{Domain, NutsCheck};
use paddlers_shared_lib::api::{
    attacks::StartFightRequest, hobo::SettleHobo, story::StoryStateTransition,
};
use paddlers_shared_lib::prelude::*;
use specs::prelude::*;

pub struct EventManager;

/// Coordinates of a village in world map
pub type VillageCoordinate = (i32, i32);

/// Send a GameEvent to the game event manager (replaces endpoints that were copied everywhere before)
pub fn game_event(ev: GameEvent) {
    paddle::nuts::send_to::<EventManager, _>(ev);
}

#[derive(Debug, PartialEq, Clone)]
pub enum GameEvent {
    HoboSatisfied(Entity),
    #[allow(dead_code)]
    HttpBuyProphet,
    LoadHomeVillage,
    LoadVillage(VillageKey),
    SendProphetAttack(VillageCoordinate),
    DialogueActions(Vec<DialogueAction>),
    SwitchToView(UiView),
    DisplayConfirmation(TextKey),
    LetVisitorsIn(AttackKey),
    /// For objects that already exist in the frontend but are lacking the net id
    NetObjId(Entity, NetObj),
}

pub fn load_game_event_manager() {
    let event_manager_activity = nuts::new_domained_activity(EventManager, &Domain::Frame);
    event_manager_activity.private_domained_channel(|_, domain, event: GameEvent| {
        let game: &mut Game = domain.try_get_mut().expect("Forgot to insert game?");
        game.try_handle_event(event).nuts_check();
    });
}

impl Game {
    fn try_handle_event(&mut self, evt: GameEvent) -> PadlResult<()> {
        match evt {
            GameEvent::HoboSatisfied(id) => {
                let now = *self.world.fetch::<Now>();
                let town_world = self.town_world_mut();
                let mut rend_store = town_world.write_storage::<Renderable>();
                if let Some(mut rend) = rend_store.get_mut(id) {
                    change_duck_sprite_to_happy(&mut rend);
                }
                std::mem::drop(rend_store);
                let hobo_store = town_world.read_storage::<Visitor>();
                if let Some(hobo) = hobo_store.get(id) {
                    if !hobo.hurried {
                        let mut v_store = town_world.write_storage::<Moving>();
                        if v_store.get(id).is_none() {
                            // hobo currently stopped (in frontend)
                            // => Set it moving again, assuming it has been released by the game-master
                            let moving = release_and_move_visitor(hobo, now);
                            v_store.insert(id, moving)?;
                        }
                        // Tell backend that release might be required
                        let net_store = town_world.read_storage::<NetObj>();
                        let net_id = net_store.get(id).ok_or(PadlError::dev_err(
                            PadlErrorCode::MissingComponent("NetObj"),
                        ))?;
                        nuts::send_to::<RestApiState, _>(HttpNotifyVisitorSatisfied {
                            hobo: HoboKey(net_id.id),
                        });
                    }
                }
            }
            GameEvent::HttpBuyProphet => {
                let player: PlayerInfo = *self.player().clone();
                crate::game::town::purchase_prophet(&player)?;
            }
            GameEvent::SendProphetAttack((x, y)) => {
                self.send_prophet_attack((x, y))?;
                // TODO: Only confirm if HTTP OK is returned
                // (Probably do this after cleaning pu network and promise handling)
                self.confirm_to_user("attack-sent".into())?;
            }
            GameEvent::SwitchToView(view) => {
                self.switch_view(view);
            }
            GameEvent::DialogueActions(actions) => {
                for a in actions {
                    self.try_handle_story_action(a)?;
                }
            }
            GameEvent::LoadVillage(vid) => {
                self.town_context.load_foreign(vid);
                self.switch_view(UiView::Town);
                request_foreign_town(vid);
            }
            GameEvent::LoadHomeVillage => {
                self.town_context.reset_to_home();
            }
            GameEvent::DisplayConfirmation(t) => {
                self.confirm_to_user(t)?;
            }
            GameEvent::LetVisitorsIn(attack) => {
                let message = StartFightRequest {
                    destination: current_village(),
                    attack,
                };
                nuts::send_to::<RestApiState, _>(message);
                self.release_attack(attack);
            }
            GameEvent::NetObjId(entity, obj) => {
                self.town_world()
                    .write_component::<NetObj>()
                    .insert(entity, obj)?;
            }
        }
        Ok(())
    }
    fn try_handle_story_action(&mut self, action: DialogueAction) -> PadlResult<()> {
        match action {
            DialogueAction::OpenScene(scene, slide) => {
                paddle::share(crate::game::dialogue::LoadNewDialogueScene::new(
                    scene, slide,
                ));
                self.switch_view(UiView::Dialogue);
            }
            DialogueAction::StoryProgress(new_story_state, choice) => {
                let t = StoryStateTransition {
                    now: self.story_state(),
                    choice,
                };
                nuts::send_to::<RestApiState, _>(t);
                paddle::share(crate::game::dialogue::NewStoryState { new_story_state });
            }
            DialogueAction::TownSelectEntity(e) => {
                let world = self.town_context.world();
                world.write_resource::<UiState>().selected_entity = e;
            }
            DialogueAction::SettleHobo => {
                let e = self
                    .town_world()
                    .read_resource::<UiState>()
                    .selected_entity
                    .ok_or_else(|| {
                        PadlError::dev_err(PadlErrorCode::DevMsg("No entity selected"))
                    })?;

                let net_ids = self.town_world().read_component::<NetObj>();
                let nest_obj = net_ids
                    .get(e)
                    .ok_or_else(|| PadlError::dev_err(PadlErrorCode::MissingComponent("NetObj")))?;
                let nest = nest_obj.as_building().ok_or_else(|| {
                    PadlError::dev_err(PadlErrorCode::DevMsg("Expected nest to be selected"))
                })?;

                let rest_msg = SettleHobo { nest };
                nuts::send_to::<RestApiState, _>(rest_msg);
            }
        }
        Ok(())
    }
}
